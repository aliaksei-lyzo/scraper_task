"""
Data models module.

This module provides Pydantic models for article content, summaries, and topics
used throughout the application.
"""

from pydantic import BaseModel, HttpUrl, Field
from typing import Optional, Dict, Any, List


class ArticleContent(BaseModel):
    """
    Pydantic model for article content extracted from a URL.
    
    Attributes:
        url: The source URL of the article
        title: The headline/title of the article
        text: The full text content of the article
        metadata: Additional metadata like author, publication date, etc.
    """
    url: HttpUrl
    title: str
    text: str
    metadata: Optional[Dict[str, Any]] = None


class ArticleSummary(BaseModel):
    """
    Pydantic model for article summary generated by LangChain.
    
    Attributes:
        article_id: Reference to the original article
        summary: The generated summary of the article, including category classification
        summary_type: The type of summary (e.g., 'concise', 'detailed')
    """
    article_id: str = Field(..., description="Reference to the original article")
    summary: str = Field(..., description="The generated summary text, including category classification")
    summary_type: str = Field("concise", description="The type of summary generated")


class TopicIdentification(BaseModel):
    """
    Pydantic model for article topics identified by LangChain.
    
    Attributes:
        article_id: Reference to the original article
        topics: List of identified topics with classifications (e.g., "politics: election reform")
        keywords: List of relevant keywords with classifications (e.g., "technology: blockchain")
    """
    article_id: str = Field(..., description="Reference to the original article")
    topics: List[str] = Field(..., description="Main topics identified in the article with classifications")
    keywords: List[str] = Field(..., description="Relevant keywords from the article with classifications")


class ArticleDocument(BaseModel):
    """
    Pydantic model for storing article data in the vector database.
    
    This model combines article content, summary, and topics for storage
    in ChromaDB with proper vectorization.
    
    Attributes:
        id: Unique identifier for the document
        content: Original article content
        summary: Generated summary with classification
        topics: Identified topics with classifications (e.g., "politics: election reform")
        keywords: Relevant keywords with classifications (e.g., "technology: blockchain")
        embedding: Vector representation for semantic search
    """
    id: str = Field(..., description="Unique identifier for the document")
    content: ArticleContent
    summary: str
    topics: List[str]
    keywords: List[str]
    embedding: Optional[List[float]] = None
